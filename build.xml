<?xml version="1.0" encoding="UTF-8"?>
<project name="api-comparator" default="build">
	<property name="toolsdir" value="${basedir}/vendor/bin/"/>

	<tstamp>
    	<format property="guid1" pattern="yyyyMMddHHmmsssss" locale="en,UK"/>
	</tstamp>

	<target name="build" depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,sami" description=""/>

	<target name="build_in_docker" depends="prepare,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,sami" description=""/>

	<target name="docker_build" depends="get_docker_status" description=""/>

	<target name="build-parallel" depends="tools-parallel,phpunit" description=""/>

	<target name="tools-parallel" description="Run tools in parallel">
		<parallel>
			<sequential>
				<antcall target="pdepend"/>
				<antcall target="phpmd-ci"/>
			</sequential>
			<antcall target="phpcpd-ci"/>
			<antcall target="phpcs-ci"/>
			<antcall target="phploc-ci"/>
			<antcall target="sami"/>
		</parallel>
	</target>

	<target name="clean" unless="clean.done" description="Cleanup build artifacts">
		<delete dir="${basedir}/build/cache"/>
		<delete dir="${basedir}/build/coverage"/>
		<delete dir="${basedir}/build/logs"/>
		<delete dir="${basedir}/build/pdepend"/>
		<delete dir="${basedir}/build/docs"/>
		<property name="clean.done" value="true"/>
	</target>

	<target name="composer_clean">
		<delete dir="${basedir}/vendor" />
	</target>

	<target name="composer" description="Update dependencies with Composer">
        <tstamp>
            <format property="thirty.days.ago" pattern="MM/dd/yyyy hh:mm aa" offset="-30" unit="day"/>
        </tstamp>
        <delete>
            <fileset dir="${basedir}">
                <include name="composer.phar" />
                <date datetime="${thirty.days.ago}" when="before"/>
            </fileset>
        </delete>

        <get src="https://getcomposer.org/composer.phar" dest="${basedir}/composer.phar" skipexisting="true"/>

        <exec executable="php">
            <arg value="composer.phar"/>
            <arg value="update"/>
            <arg value="--prefer-dist"/>
            <arg value="--no-progress"/>
        </exec>
    </target>

    <target name="prepare" unless="prepare.done" description="Prepare for build">
		<mkdir dir="${basedir}/build/cache"/>
		<mkdir dir="${basedir}/build/coverage"/>
		<mkdir dir="${basedir}/build/logs"/>
		<mkdir dir="${basedir}/build/pdepend"/>
		<mkdir dir="${basedir}/build/docs"/>
		<property name="prepare.done" value="true"/>
	</target>

	<target name="lint" depends="prepare" description="Perform syntax check of sourcecode files">
		<apply executable="php" failonerror="false">
			<arg value="-l" />

			<fileset dir="${basedir}/src">
				<include name="**/*.php" />
				<modified />
			</fileset>

			<fileset dir="${basedir}/tests">
				<include name="**/*.php" />
				<modified />
			</fileset>
		</apply>
	</target>

	<target name="phploc" depends="prepare" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
		<exec executable="${toolsdir}phploc">
			<arg value="--count-tests" />
			<arg path="${basedir}/src" />
			<arg path="${basedir}/tests" />
		</exec>
	</target>

	<target name="phploc-ci" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${toolsdir}phploc">
			<arg value="--count-tests" />
			<arg value="--log-csv" />
			<arg path="${basedir}/build/logs/phploc.csv" />
			<arg value="--log-xml" />
			<arg path="${basedir}/build/logs/phploc.xml" />
			<arg path="${basedir}/src" />
			<arg path="${basedir}/tests" />
		</exec>
	</target>

	<target name="pdepend" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${toolsdir}pdepend">
			<arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
			<arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
			<arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
			<arg path="${basedir}/src" />
		</exec>
	</target>

	<target name="phpmd" depends="prepare" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${toolsdir}phpmd">
			<arg path="${basedir}/src" />
			<arg value="text" />
			<arg path="${basedir}/build/phpmd.xml" />
		</exec>
	</target>

	<target name="phpmd-ci" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
 		<exec executable="${toolsdir}phpmd">
			<arg path="${basedir}/src" />
			<arg value="xml" />
			<arg path="${basedir}/build/phpmd.xml" />
			<arg value="--reportfile" />
			<arg path="${basedir}/build/logs/pmd.xml" />
		</exec>
	</target>

	<target name="phpcs" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${toolsdir}phpcs">
			<arg value="--standard=${basedir}/build/phpcs.xml" />
			<arg value="--extensions=php" />
			<arg value="--ignore=autoload.php" />
			<arg path="${basedir}/src" />
			<arg path="${basedir}/tests" />
		</exec>
	</target>

	<target name="phpcs-ci" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${toolsdir}phpcs" output="/dev/null">
			<arg value="--report=checkstyle" />
			<arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
			<arg value="--standard=${basedir}/build/phpcs.xml" />
			<arg value="--extensions=php" />
			<arg value="--ignore=autoload.php" />
			<arg path="${basedir}/src" />
			<arg path="${basedir}/tests" />
		</exec>
	</target>

	<target name="phpcpd" depends="prepare" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${toolsdir}phpcpd">
			<arg path="${basedir}/src" />
		</exec>
	</target>

	<target name="phpcpd-ci" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${toolsdir}phpcpd">
			<arg value="--log-pmd" />
			<arg path="${basedir}/build/logs/pmd-cpd.xml" />
			<arg path="${basedir}/src" />
		</exec>
	</target>

	<target name="phpunit" depends="prepare,composer" description="Run unit tests with PHPUnit">
		<exec executable="${toolsdir}phpunit" failonerror="false">
			<arg value="--configuration"/>
			<arg path="${basedir}/build/phpunit.xml"/>
		</exec>
	</target>

	<target name="sami" depends="prepare" description="create doc with Sami">
		<exec executable="php">
            <arg value="${basedir}/vendor/sami/sami/sami.php"/>
            <arg value="update"/>
            <arg value="${basedir}/build/sami_config.php"/>
        </exec>
	</target>

	<target name="docker_init">
		<exec executable="docker">
			<arg value="build"/>
			<arg value="-tq"/>
			<arg value="giift_ci:${guid1}"/>
			<arg value="."/>
		</exec>
	</target>

	<target name="docker_run" depends="docker_init">
		<exec executable="docker">
			<arg value="run" />
			<arg value="--cidfile" />
			<arg value="${basedir}/${guid1}" />
			<arg value="giift_ci:${guid1}" />
			<arg value="sh" />
			<arg value="/var/www/html/dockerbuild.sh" />
		</exec>
	</target>

	<target name="docker_import_build" depends="docker_run">
		<exec outputproperty="container_id" executable="cat" osfamily="unix">
			<arg value="${basedir}/${guid1}" />
		</exec>
		<exec outputproperty="container_id" executable="type" osfamily="windows">
			<arg value="${basedir}/${guid1}" />
		</exec>
		<exec executable="docker">
			<arg value="cp" />
			<arg value="${container_id}:/var/www/html/build" />
			<arg value="${basedir}" />
		</exec>
	</target>

	<target name="docker_clean" depends="docker_import_build">
		<exec executable="docker">
			<arg value="rm" />
			<arg value="${container_id}" />
		</exec>
		<delete file="${guid1}" />
	</target>

	<target name="get_docker_status" depends="docker_delete">
		<loadfile property="docker_status"
			srcFile="${basedir}/build/status"
		/>
		<fail>
			<condition>
				<not>
					<equals arg1="success" arg2="${docker_status}" trim="true" />
				</not>
			</condition>
		</fail>
	</target>

	<target name="docker_delete" depends="docker_clean">
		<exec executable="docker">
			<arg value="rmi" />
			<arg value="giift_ci:${guid1}" />
		</exec>
	</target>
</project>
